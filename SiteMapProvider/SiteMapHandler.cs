using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Web;
using System.Xml;

using Composite.Data;
using Composite.Data.Types;

namespace CompositeC1Contrib.Web
{
    public class SiteMapHandler : IHttpHandler
    {
        private const string _ns = "http://www.sitemaps.org/schemas/sitemap/0.9";

        private HttpContext _ctx;
        private XmlWriter _writer;

        bool IHttpHandler.IsReusable
        {
            get { return false; }
        }

        void IHttpHandler.ProcessRequest(HttpContext ctx)
        {
            _ctx = ctx;

            string content = String.Empty;

            using (var ms = new MemoryStream())
            {
                var provider = SiteMap.Provider;
                var providerType = provider.GetType();

                _writer = XmlWriter.Create(ms, new XmlWriterSettings() { Encoding = Encoding.UTF8, Indent = true });

                _writer.WriteStartDocument();
                _writer.WriteComment("Generated by Composite C1 Contrib to comply with Sitemaps protocol");
                _writer.WriteComment(String.Format("Sitemap provided by {0}", providerType.Name));

                if (isRootRequest())
                {
                    var rootNodes = ((CompositeC1SiteMapProvider)provider).GetRootNodes();
                    rootNodes = filterOutOtherDomains(rootNodes);

                    if (rootNodes.Count() > 1)
                    {
                        writeSiteMapList(rootNodes);
                    }
                    else
                    {
                        writeFullSiteMap(provider);
                    }
                }
                else
                {
                    writeFullSiteMap(provider);
                }

                _writer.WriteEndDocument();

                _writer.Flush();

                content = Encoding.UTF8.GetString(ms.ToArray());
            }

            _ctx.Response.Clear();

            _ctx.Response.ContentType = "text/xml";
            _ctx.Response.ContentEncoding = Encoding.UTF8;

            _ctx.Response.Write(content);
        }

        private IEnumerable<BaseSiteMapNode> filterOutOtherDomains(IEnumerable<BaseSiteMapNode> rootNodes)
        {
            using (var data = new DataConnection())
            {
                foreach (var node in rootNodes)
                {
                    var hostname = data.Get<IHostnameBinding>().SingleOrDefault(h => h.HomePageId == Guid.Parse(node.Key) && h.Culture == node.Culture.Name);
                    if (hostname == null || matchHostname(hostname))
                    {
                        yield return node;
                    }
                }
            }
        }

        private bool matchHostname(IHostnameBinding binding)
        {
            var host = _ctx.Request.Url.Host;

            if (binding.Hostname == host)
            {
                return true;
            }

            foreach (var alias in binding.Aliases.Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries))
            {
                if (alias == host)
                {
                    return true;
                }
            }

            return false;
        }

        private void writeSiteMapList(IEnumerable<BaseSiteMapNode> rootNodes)
        {
            _writer.WriteStartElement("sitemapindex", _ns);

            foreach (var node in rootNodes)
            {
                _writer.WriteStartElement("sitemap");

                _writer.WriteStartElement("loc");
                _writer.WriteString(String.Format("{0}://{1}/{2}/sitemap.xml", _ctx.Request.Url.Scheme, _ctx.Request.Url.Host, node.Culture));
                _writer.WriteEndElement();

                _writer.WriteEndElement();
            }

            _writer.WriteEndElement();
        }

        private void writeFullSiteMap(SiteMapProvider provider)
        {
            _writer.WriteStartElement("urlset", _ns);

            writeElement(provider.RootNode);

            _writer.WriteEndElement();
        }

        private bool isRootRequest()
        {
            string url = _ctx.Request.RawUrl;

            return url == "/sitemap.xml";
        }

        private void writeElement(SiteMapNode node)
        {
            _writer.WriteStartElement("url");

            _writer.WriteStartElement("loc");
            _writer.WriteString(String.Format("{0}://{1}{2}", _ctx.Request.Url.Scheme, _ctx.Request.Url.Host, node.Url));
            _writer.WriteEndElement();

            var baseNode = node as BaseSiteMapNode;
            if (baseNode != null)
            {
                var lastEdited = baseNode.LastModified;
                _writer.WriteStartElement("lastmod");
                _writer.WriteString(lastEdited.ToUniversalTime().ToString("u").Replace(" ", "T"));
                _writer.WriteEndElement();

                var changeFrequency = baseNode.ChangeFrequency;
                if (changeFrequency.HasValue)
                {
                    _writer.WriteStartElement("changefreq");
                    _writer.WriteString(changeFrequency.ToString().ToLower());
                    _writer.WriteEndElement();
                }

                var priority = baseNode.Priority;
                if (priority.HasValue)
                {
                    if (priority > 1 && priority < 10)
                    {
                        _writer.WriteStartElement("priority");
                        _writer.WriteString(((decimal)priority.Value / 10).ToString("0.0", CultureInfo.InvariantCulture));
                        _writer.WriteEndElement();
                    }
                }
            }

            _writer.WriteEndElement();

            foreach (SiteMapNode child in node.ChildNodes)
            {
                writeElement(child);
            }
        }
    }
}
