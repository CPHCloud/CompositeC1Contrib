using System;
using System.Globalization;
using System.IO;
using System.Text;
using System.Web;
using System.Xml;

namespace CompositeC1Contrib.Web
{
    public class SiteMapHandler : IHttpHandler
    {
        private HttpContext _ctx;
        private XmlWriter _writer;

        bool IHttpHandler.IsReusable
        {
            get { return false; }
        }

        void IHttpHandler.ProcessRequest(HttpContext ctx)
        {
            _ctx = ctx;

            string content = String.Empty;

            using (var ms = new MemoryStream())
            {
                var provider = SiteMap.Provider;
                var providerType = provider.GetType();

                _writer = XmlWriter.Create(ms, new XmlWriterSettings() { Encoding = Encoding.UTF8, Indent = true });

                _writer.WriteStartDocument();
                _writer.WriteComment("Generated by Composite C1 Contrib to comply with Sitemaps protocol");
                _writer.WriteComment(String.Format("Sitemap provided by {0}", providerType.Name));

                _writer.WriteStartElement("urlset", "http://www.sitemaps.org/schemas/sitemap/0.9");

                writeElement(provider.RootNode);

                _writer.WriteEndElement();
                _writer.WriteEndDocument();

                _writer.Flush();

                content = Encoding.UTF8.GetString(ms.ToArray());
            }

            _ctx.Response.Clear();

            _ctx.Response.ContentType = "text/xml";
            _ctx.Response.ContentEncoding = Encoding.UTF8;

            _ctx.Response.Write(content);
        }

        private void writeElement(SiteMapNode node)
        {
            _writer.WriteStartElement("url");

            _writer.WriteStartElement("loc");
            _writer.WriteString(String.Format("{0}://{1}{2}", _ctx.Request.Url.Scheme, _ctx.Request.Url.Host, node.Url));
            _writer.WriteEndElement();

            var baseNode = node as BaseSiteMapNode;
            if (baseNode != null)
            {
                var lastEdited = baseNode.LastModified;
                _writer.WriteStartElement("lastmod");
                _writer.WriteString(lastEdited.ToUniversalTime().ToString("u").Replace(" ", "T"));
                _writer.WriteEndElement();

                var changeFrequency = baseNode.ChangeFrequency;
                if (changeFrequency.HasValue)
                {
                    _writer.WriteStartElement("changefreq");
                    _writer.WriteString(changeFrequency.ToString().ToLower());
                    _writer.WriteEndElement();
                }

                var priority = baseNode.Priority;
                if (priority.HasValue)
                {
                    if (priority > 1 && priority < 10)
                    {
                        _writer.WriteStartElement("priority");
                        _writer.WriteString(((decimal)priority.Value / 10).ToString("0.0", CultureInfo.InvariantCulture));
                        _writer.WriteEndElement();
                    }
                }
            }

            _writer.WriteEndElement();

            foreach (SiteMapNode child in node.ChildNodes)
            {
                writeElement(child);
            }
        }
    }
}
