using System;
using System.Collections.Generic;
using System.Linq;

using Composite.C1Console.Security;
using Composite.Core.Xml;
using Composite.Functions;

namespace CompositeC1Contrib.FormBuilder.FunctionProviders
{
    public class FormFunction : IFunction
    {
        public EntityToken EntityToken
        {
            get { return new FormFunctionEntityToken(typeof(FormBuilderFunctionProvider).Name, String.Join(".", Namespace, Name)); }
        }

        public string Namespace
        {
            get { return "FormBuilder"; }
        }

        public string Name
        {
            get { return "Form"; }
        }

        public string Description
        {
            get { return ""; }
        }

        public Type ReturnType
        {
            get { return typeof(XhtmlDocument); }
        }

        public IEnumerable<ParameterProfile> ParameterProfiles
        {
            get
            {
                var list = new List<ParameterProfile>();

                list.Add(new ParameterProfile("FormType", typeof(string), true, new ConstantValueProvider(null), StandardWidgetFunctions.DropDownList(GetType(), "GetFormTypes", "Key", "Value", false, false), "Form type", new HelpDefinition("Form type")));
                list.Add(new ParameterProfile("Before", typeof(XhtmlDocument), false, new ConstantValueProvider(String.Empty), StandardWidgetFunctions.GetDefaultWidgetFunctionProviderByType(typeof(XhtmlDocument)), "Before", new HelpDefinition("Before")));
                list.Add(new ParameterProfile("Success", typeof(XhtmlDocument), false, new ConstantValueProvider(String.Empty), StandardWidgetFunctions.GetDefaultWidgetFunctionProviderByType(typeof(XhtmlDocument)), "Success", new HelpDefinition("Success")));

                return list;
            }
        }

        public object Execute(ParameterList parameters, FunctionContextContainer context)
        {
            var formType = parameters.GetParameter<string>("FormType");
            var type = Type.GetType(formType);

            IFunction function = null;
            if (!FunctionFacade.TryGetFunction(out function, "Forms." + type.Name))
            {
                throw new NotImplementedException("Autogenerated standardform is not implemented yet");
            }

            return FunctionFacade.Execute<object>(function, new Dictionary<string, object>(), context);
        }

        public static IDictionary<string, string> GetFormTypes()
        {
            var returnList = new List<Type>();

            var asms = AppDomain.CurrentDomain.GetAssemblies();
            foreach (var asm in asms)
            {
                try
                {
                    var types = asm.GetTypes().Where(t => typeof(BaseForm).IsAssignableFrom(t) && (t != typeof(BaseForm)));

                    returnList.AddRange(types);
                }
                catch { }
            }

            return returnList.ToDictionary(t => t.AssemblyQualifiedName, t => t.Name);
        }
    }
}
