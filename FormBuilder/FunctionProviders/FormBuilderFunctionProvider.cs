using System;
using System.Collections.Generic;
using System.Linq;

using Composite.Functions;
using Composite.Functions.Plugins.FunctionProvider;

namespace CompositeC1Contrib.FormBuilder.FunctionProviders
{
    public class FormBuilderFunctionProvider : IFunctionProvider
    {
        public FunctionNotifier FunctionNotifier { private get; set; }

        public IEnumerable<IFunction> Functions
        {
            get
            {
                var formTypes = GetFormTypes();
                foreach (var type in formTypes)
                {
                    IFunction function = null;
                    if (!FunctionFacade.TryGetFunction(out function, "Forms." + type.Name))
                    {
                        throw new NotImplementedException("Autogenerated standardform is not implemented yet");
                    }
                }

                return Enumerable.Empty<IFunction>();
            }
        }

        public static IEnumerable<Type> GetFormTypes()
        {
            var returnList = new List<Type>();

            var asms = AppDomain.CurrentDomain.GetAssemblies();
            foreach (var asm in asms)
            {
                try
                {
                    var types = asm.GetTypes().Where(t => typeof(BaseForm).IsAssignableFrom(t) && (t != typeof(BaseForm)));

                    returnList.AddRange(types);
                }
                catch { }
            }

            return returnList;
        }
    }
}
